- Generate main components
    - Navbar: >>ng g c navbar
    - Product-list: >>ng g c product-list
    - Product-card: >>ng g c product-card

- Create product_array in product-list components [attached]

- Render Products cards from the provided products_array
    -in product-list component
        <div class="col" *ngFor="let product of products_array; let i = index">
            <app-product-card [productCard]="product"></app-product-card>
        </div>
    -in product-card component
        import { ...., Input } from '@angular/core'; // First, import Input
        export class ProductCardComponent {
            @Input() productCard: any = []; // decorate the property with @Input()
        }

        THEN ..
        Use productCard objects to show each product data

    - Count_in_stock condition as requested
        (Using ngIf and ng-template)
        <p class="red-colored" *ngIf="productCard.rating.count_in_stock == 0; else elseBlock">
            Out of Stock
        </p>
        <ng-template #elseBlock>
            <p class="green-colored">In Stock</p>
        </ng-template>

    - Send data from product-card(child) to product-list(parent)
        Example : 
            ● <app-child (messageEvent)="receiveMessage($event)"></app-child> - parent
            ● receiveMessage($event) {this.message = $event}- parent.ts
            ● @Output() messageEvent = new EventEmitter<string>();- Child.ts
            ● sendMessage() {this.messageEvent.emit(this.message)} - Child.ts
            this.sendproductCard.emit(this.productCard); // emit fun sends data to the parent
            ● <button (click)="sendMessage()">Send Message</button> - Child.html
